import streamlit as st
import pandas as pd
import requests
from io import StringIO
import numpy as np
from scipy.interpolate import interp1d
from scipy.spatial import cKDTree

# Fun칞칚o para carregar os dados do Tesouro Direto
@st.cache_data
def load_treasury_data():
    url = "https://www.tesourotransparente.gov.br/ckan/dataset/df56aa42-484a-4a59-8184-7676580c81e3/resource/796d2059-14e9-44e3-80c9-2d9e30b405c1/download/PrecoTaxaTesouroDireto.csv"
    response = requests.get(url)
    csv_data = StringIO(response.text)
    
    # Carregar CSV garantindo que as datas sejam interpretadas corretamente
    df = pd.read_csv(csv_data, sep=';', decimal=',', parse_dates=['Data Base', 'Data Vencimento'], dayfirst=True)
    return df

# Carregar os dados
df = load_treasury_data()

# Interface no Streamlit
st.title("游늵 C치lculo da Infla칞칚o Impl칤cita - Tesouro Direto")

# Sele칞칚o da data base e vencimento
data_base_options = df["Data Base"].dt.strftime("%d/%m/%Y").unique()
data_base_input = st.selectbox("游늰 Selecione a Data Base:", data_base_options)

vencimento_input = st.date_input("游늰 Escolha o vencimento desejado:")

# Converter a entrada para datetime
data_base_input = pd.to_datetime(data_base_input, format="%d/%m/%Y")
vencimento_input_num = int(vencimento_input.strftime("%Y%m%d"))

# Filtrar os t칤tulos apenas para a data base inserida
df_filtered = df[df["Data Base"] == data_base_input]

# Separar t칤tulos prefixados e IPCA+
df_prefixado = df_filtered[df_filtered["Tipo Titulo"].str.contains("Prefixado") & ~df_filtered["Tipo Titulo"].str.contains("Juros Semestrais")].copy()
df_ipca = df_filtered[df_filtered["Tipo Titulo"].str.contains("IPCA")].copy()

# Converter colunas de data para datetime para evitar erros
df_ipca["Data Vencimento"] = pd.to_datetime(df_ipca["Data Vencimento"], errors='coerce')
df_prefixado["Data Vencimento"] = pd.to_datetime(df_prefixado["Data Vencimento"], errors='coerce')

# Converter datas de vencimento para n칰meros para facilitar interpola칞칚o
df_ipca["Vencimento_Num"] = df_ipca["Data Vencimento"].dt.strftime("%Y%m%d").astype(int)
df_prefixado["Vencimento_Num"] = df_prefixado["Data Vencimento"].dt.strftime("%Y%m%d").astype(int)

# Criar 칤ndice para busca eficiente do t칤tulo IPCA+ mais pr칩ximo
df_ipca_sorted = df_ipca.sort_values("Vencimento_Num")
vencimentos_ipca = df_ipca_sorted["Vencimento_Num"].values.reshape(-1, 1)
tree = cKDTree(vencimentos_ipca)

# Fun칞칚o para encontrar o t칤tulo IPCA+ mais pr칩ximo
def find_nearest_vencimento(vencimento_num):
    _, idx = tree.query([[vencimento_num]])
    return df_ipca_sorted.iloc[idx[0]]["Data Vencimento"], df_ipca_sorted.iloc[idx[0]]["Taxa Compra Manha"]

# Aplicar busca do t칤tulo IPCA+ mais pr칩ximo
df_prefixado["Vencimento Mais Pr칩ximo"], df_prefixado["Taxa IPCA Correspondente"] = zip(
    *df_prefixado["Vencimento_Num"].apply(find_nearest_vencimento)
)

# Calcular a infla칞칚o impl칤cita original
df_prefixado["Infla칞칚o Impl칤cita"] = ((1 + df_prefixado["Taxa Compra Manha"] / 100) /
                                      (1 + df_prefixado["Taxa IPCA Correspondente"] / 100) - 1) * 100

# Interpola칞칚o para o vencimento escolhido pelo usu치rio
if len(df_ipca_sorted) >= 2:
    f_interp = interp1d(df_ipca_sorted["Vencimento_Num"], df_ipca_sorted["Taxa Compra Manha"], kind="linear", fill_value="extrapolate")
    taxa_ipca_interpolada = f_interp(vencimento_input_num)
else:
    taxa_ipca_interpolada = np.nan  # Se n칚o houver dados suficientes, n칚o interpolamos

# Calcular a infla칞칚o impl칤cita interpolada
df_prefixado["Infla칞칚o Impl칤cita Interpolada"] = ((1 + df_prefixado["Taxa Compra Manha"] / 100) /
                                                  (1 + taxa_ipca_interpolada / 100) - 1) * 100

# Adicionar colunas descritivas
df_prefixado["T칤tulo Prefixado"] = df_prefixado["Tipo Titulo"]
df_prefixado["Taxa Prefixado"] = df_prefixado["Taxa Compra Manha"]
df_prefixado["T칤tulo IPCA"] = "Tesouro IPCA+"
df_prefixado["Taxa IPCA Interpolada"] = taxa_ipca_interpolada

# Ajustar formato de datas para DD/MM/YYYY
df_prefixado["Data Base"] = df_prefixado["Data Base"].dt.strftime("%d/%m/%Y")
df_prefixado["Data Vencimento"] = df_prefixado["Data Vencimento"].dt.strftime("%d/%m/%Y")
df_prefixado["Vencimento Mais Pr칩ximo"] = df_prefixado["Vencimento Mais Pr칩ximo"].dt.strftime("%d/%m/%Y")

# Selecionar colunas para exibi칞칚o
df_resultado = df_prefixado[[
    'Data Base', 'T칤tulo Prefixado', 'Data Vencimento', 'Taxa Prefixado',
    'T칤tulo IPCA', 'Vencimento Mais Pr칩ximo', 'Taxa IPCA Correspondente', 'Infla칞칚o Impl칤cita',
    'Taxa IPCA Interpolada', 'Infla칞칚o Impl칤cita Interpolada'
]]

# Exibir tabela no Streamlit
st.subheader("游늵 Resultado do C치lculo")
st.dataframe(df_resultado)

# Criar CSV para download com todas as colunas originais
csv_auditoria = df_filtered[df_filtered["Data Vencimento"].isin(df_prefixado["Data Vencimento"])]
csv_auditoria = csv_auditoria.to_csv(index=False, sep=";", decimal=",")

# Bot칚o para download do CSV
st.download_button(
    label="游닌 Baixar CSV Completo (Auditoria)",
    data=csv_auditoria,
    file_name="dados_auditoria.csv",
    mime="text/csv"
)
